@import "../reset.css";
@import "../common.less";

/*

Usages:

  .your_grid_container {
    .responsive_hex_tiling(
      @min_columns: 2, @max_columns: 16, @step: 300px,
      @grid_size: 100%, @cells: ~'> li')
  }

All options are optional, and those are the defaults.

Static grid:

  .your_grid_container {
    .hex_tiling(@columns: 3, @grid_size: 100%, @cells: ~'> li');
  }


*/


/*
function hexagon(turtle, radius) {
  // turtle starts pointing up.
  turtle.turnLeft(30);
  console.log(turtle.pos);
  for (var i = 0; i != 6; ++i) {
    turtle.turnRight(60);
    turtle.fwd(radius);
    console.log(turtle.pos);
  }
}

var t = new Turtle();
t.pos = [0, 50];
hexagon(t, 50);
   [0, 50]
   [25, 6.698729810778062]
   [75, 6.698729810778054]
   [100.00000000000001, 49.99999999999998]
   [75.00000000000003, 93.30127018922192]
   [25.00000000000003, 93.30127018922195]
   [0, 50.00000000000004]

t = new Turtle();
t.pos = [50,100]
t.turnLeft(90);
hexagon(t, 50);
  [50, 100]
  [6.698729810778062, 75]
  [6.698729810778054, 25]
  [49.99999999999998, 0]
  [93.30127018922192, 24.99999999999997]
  [93.30127018922195, 74.99999999999997]
  [50.00000000000004, 100]
*/

// You can use this to transform cells to be big enough to meet.
@hex_scaling_full_bleed: 100 / (100 - 2 * 6.698729810778);

.hex_tiling(@columns, @grid_size: 100%, @cells: ~'> li') {
  @cell_size: @grid_size / @columns;
  
  @{cells} {
    float: left;
    line-height: 0;  
    display: inline-block;
    width: @cell_size;
    height: @cell_size;
    overflow: hidden;

    /*Chrome,Safari*/
    -webkit-clip-path: polygon(
      50% 100%,
      6.698729810778062% 75%,
      6.698729810778054% 25%,
      50% 0,
      93.30127018922192% 25%,
      93.30127018922195% 75%,
      50% 100%);
  }

  @cluster: 2 * @columns - 1;
  @after_first_row: @columns + 1;

  @{cells}:nth-of-type(n + @{after_first_row}) {
    margin-top: -0.06698729810778062 * 2 * @cell_size;
  }

  @row_start: @columns - 2;
  @{cells}:nth-of-type(@{cluster}n - @{row_start}) {
    margin-left: @cell_size / 2;
  }
}

.responsive_hex_tiling(
  @min_columns: 2, @max_columns: 16, @step: 300px,
  @grid_size: 100%, @cells: ~'> li') {
 .n_columns(@n: @min_columns) when (@n = @min_columns) {
    @media screen and (max-width: ((@n + 1) * @step)) {
      .hex_tiling(@columns: @n, @grid_size: @grid_size, @cells: @cells);
    }
    .n_columns(@n: @n + 1);
  }
  .n_columns(@n: @min_columns) when (@n =< @max_columns) {
    @media screen and (min-width: (@n * @step)) and (max-width: ((@n + 1) * @step)) {
      /* @n columns */
      .hex_tiling(@columns: @n, @grid_size: @grid_size, @cells: @cells);
    }    
    .n_columns(@n: @n + 1);
  }
  .n_columns(@n: @min_columns) when (@n = @max_columns) {
    @media screen and (min-width: (@n * @step)) {
      .hex_tiling(@columns: @n, @grid_size: @grid_size, @cells: @cells);
    }    
    .n_columns(@n: @n + 1);
  }

  .n_columns(@min_columns);
}

.honeycomb {
  .responsive_hex_tiling(@step: 150px, @grid_size: 100vw);
  width: 100%;
  height: 100%;
}

.honeycomb > li {
  transition: clip-path 113ms, -webkit-clip-path 113ms;
}


